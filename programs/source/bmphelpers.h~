/**************************************************************************
 * bmphelpers.h
 *
 * Jonathan Walker, j.walker@cantab.net
 *
 * Headers for certain helper functions for working with bmp images
 *************************************************************************/

#ifndef BMPHELPERS_H
#define BMPHELPERS_H

#include "bmp.h"
#include "bmpimage.h"
#include "bmphelpers.c"

/*
	I have to choose an arbitrary size beyond which I can't analyse black areas (some functions wouldn't work in their current implementation). MAX_BLACK_AREA_SIZE is enough.
 */
#define MAX_BLACK_AREA_SIZE 40000 

/*
	There are lots of black smudges in the source images which rather complicate the process of deciding where to crop out unneeded white spaces. SMUDGE_SIZE is the pixel number threshold below which a black area is considered irrelevant.
 */
#define SMUDGE_SIZE 150

/*
	This struct is used to store the bounds of a black area on the page
 */	
typedef struct {
	int xmin;
	int xmax;
	int ymin;
	int ymax;
} BlackArea;

/*
	This struct is used to store the coordinates of a pixel that is known to be a black one
 */
typedef struct {
	int x;
	int y;
} BlackPixel;

/*
	A helper function that checks if a given pixel has already found in the current analysis of a black area of the image
 */
bool AlreadyFound(int* Xlist, int* Ylist, BlackPixel* blackpixel);

/*
	Finds all the touching black pixels in a black area of the image
 */
void RecursiveSearchBlack(BMPImage* image, int* Xlist, int* Ylist, int x, int y, int* i, int lowerlimit, int upperlimit);

/*
	Find the min/max x/y values of a black area (within the x bounds desired), of which x,y is a constituent pixel.
	Returns the total number of black pixels in that area. 
 */
int GetFrameOfBlackArea(BMPImage* image, BlackPixel* blackpixel, BlackArea* blackarea, int lowerlimit, int upperlimit);

/* 
	Determines whether two black pixels are constituents of one black area
 */
bool BlackPixelsConnected(BMPImage* image, BlackPixel* blackpixelA, BlackPixel* blackpixelB);

#endif
