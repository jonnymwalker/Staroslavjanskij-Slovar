/****************************************************************************
 * middlesplit.c
 *
 * Jonathan Walker
 * j.walker@cantab.net
 *
 * Takes a bmp 3 image (specified in an arguments text file, 1 image per
 * line), finds a white vertical line near the middle, crops it along that
 * line by writing a bash script of ImageMagick commands
 ***************************************************************************/
       
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#include "bmp.h"
#include "bmphelpers.c"
#include "bmpimage.c"

#define MAX_ARGS_NUMBER 10000
int FindAWhiteLine(BMPImage* theimage);
int ProcessOneFile(char* inputfilename, bool debugmode);

int main(int argc, char* argv[])
{
	bool debugmode = false;

	// check command usage
	if (argc == 3)
    	{
        	if (!((strcmp(argv[1], "--debug=ON") == 0) || (strcmp(argv[1], "-d") == 0)))
		{
			fprintf(stderr, "Error! Correct usage: middlesplit [--debug=ON] argsfile\n");
	        	return 1;
		}
		else
		{
			debugmode = true;
		}
    	}
	else if (argc != 2)
	{
		fprintf(stderr, "Error! Correct usage: middlesplit [--debug=ON] argsfile\n");
		return 1;
	}
    
	// unpack the arguments file
    	char argsfilename[256];
	if (argc == 3)
		sprintf(argsfilename, "%s", argv[2]);
	else
		sprintf(argsfilename, "%s", argv[1]);
	FILE* argsfile = fopen(argsfilename, "r");
	if (argsfile == NULL)
	{
		fprintf(stderr, "Could not open the argument file, %s! Exiting...\n", argsfilename);
		return 2;
	}
	char** args = malloc(MAX_ARGS_NUMBER * sizeof(char*));
	char buffer[256];
	int foundargsnumber = 0;
	for (int i = 0; i < MAX_ARGS_NUMBER; i++)
	{
		if (i == MAX_ARGS_NUMBER-1)
		{
			fprintf(stderr, "You can't specify more than 10,000 files in the argfile! Exiting...\n");
			return 3;
		}
		if ( fgets(buffer, 256, argsfile) != NULL && buffer[i] != '\0')
		{
			args[i] = malloc(256 * sizeof(char));
			for (int j = 0; j < 256; j++)
			{
				if (buffer[j] == '\n')
				{
					buffer[j] = '\0';
					j = 256;
				}
			}
			sprintf(args[i], "%s", buffer);
		}
		else
		{
			foundargsnumber = i;
			i = MAX_ARGS_NUMBER;
		}
	}
	fclose(argsfile);

	// process the images specified by each of the strings in the argsfile
	int returnvalue = 0;
	for (int i = 0; i < foundargsnumber; i++)
	{
		returnvalue += ProcessOneFile(args[i], debugmode);
		free(args[i]);
		if (returnvalue != 0)
		{
			free(args[foundargsnumber+1]);
			free(args);
			return returnvalue;
		}
	}
	free(args[foundargsnumber+1]);
	free(args);
	return returnvalue;
}

int FindAWhiteLine(BMPImage* theimage) 
{
	bool linefound = false;
	int lowestblacks = 10000;
	int bestx = 0;
	for (int i = 0; i < theimage->bi.biWidth/8; i++) // /8 means it checks only a 1/4 of the total image
	{	
		int blackshere = 0;
		for (int j = 0; j < theimage->bi.biHeight; j++)
		{
			if (theimage->pixels[j][(theimage->bi.biWidth/2)+i] == false)
				blackshere++;

		}
		if (blackshere < lowestblacks)
		{
			lowestblacks = blackshere;
			bestx = (theimage->bi.biWidth/2)+i;
			if (blackshere == 0)
				return bestx;
		}
		blackshere = 0;
		for (int j = 0; j < theimage->bi.biHeight; j++)
		{
			if (theimage->pixels[j][(theimage->bi.biWidth/2)-i] == false)
				blackshere++;
		}
		if (blackshere < lowestblacks)
		{	
			lowestblacks = blackshere;
			bestx = (theimage->bi.biWidth/2)-i;
			if (blackshere == 0)
				return bestx;
		}
	}
	return bestx; // indicates failure	
}

int ProcessOneFile(char* inputfilename, bool debugmode)
{
	// create a short file name from which I can build other needed filenames
	char shortfilename[256];
	bool foundslash = false;
	int shortfileindex = 0;
	for (int i = 0; i < 256; i++)
	{
		if (inputfilename[i] == '/')
		{
			foundslash = true;
			i++;
		}
		if (foundslash && inputfilename[i] == '.')
		{
			shortfilename[shortfileindex] = '\0';
			i = 256;
		}
		else if (foundslash)
		{
			shortfilename[shortfileindex] = inputfilename[i];
			shortfileindex++;
		} 
	}

    	// load in the bmp image
	BMPImage* theimage = InitialiseImage(inputfilename);
    	if (theimage == NULL)
	{
		fprintf(stderr, "Failed to initialise the image at %s! (Is the system low on memory?) Exiting...\n", inputfilename);
		return 11;
	}
	
	int line = FindAWhiteLine(theimage);
	if (line == -1)
	{
		fprintf(stderr, "Failed to find a white line in the middle of %s\n", inputfilename);
		return 4;
	}
	else
	{
		if (debugmode)
		{
			char datafile[256];
			sprintf(datafile, "debug/%s.data", shortfilename);
			FILE* dataptr = fopen(datafile, "w");
			if (dataptr == NULL)
			{
				fprintf(stderr, "A data file for %s could not be created! Exiting...\n", shortfilename);
				return 5;
			}
			char data[256];
			sprintf(data, "%d\n", line);
			fputs(data, dataptr);
			fclose(dataptr); 
		}
	
		// output a bash script to carry out necessary commands immediately after the programs ends
		char shfilename[256];
		sprintf(shfilename, "scripts/middlesplit.%s.sh", shortfilename);
		FILE* outscript = fopen(shfilename, "w");
		if (outscript == NULL) 
		{
			fprintf(stderr, "Bad outscript pointer produced for %s! Exiting...\n", shortfilename);
			return 6;
		}
		fprintf(outscript, "convert images/%s.png -crop %ix%i+%i+%i +repage images/%s-A.png\n", shortfilename, line, theimage->bi.biHeight, 0, 0, shortfilename);
		fprintf(outscript, "convert images/%s.png -crop %ix%i+%i+%i +repage images/%s-B.png\n", shortfilename, theimage->bi.biWidth-line, theimage->bi.biHeight, line, 0, shortfilename);
		if (debugmode)
			fprintf(outscript, "convert debug/%s.png -stroke red -strokewidth 7 -draw \"line %d,%d %d,%d\" debug/%s.png\n", shortfilename, line, 0, line, theimage->bi.biHeight, shortfilename);
		fprintf(outscript, "convert images/%s-A.png BMP3:images/%s-A.bmp\n", shortfilename, shortfilename);
		fprintf(outscript, "convert images/%s-B.png BMP3:images/%s-B.bmp\n", shortfilename, shortfilename);
		fprintf(outscript, "rm %s\n", inputfilename);
		fclose(outscript);

		// output a file containing the arguments for the next program in the chain
		char outargsname[256];
		sprintf(outargsname, "scripts/cropedges.%s.args", shortfilename);
		FILE* outargs = fopen(outargsname, "w");
		if (outargs == NULL)
		{
			fprintf(stderr, "Could not open the outargs file for %s! Exiting...\n", shortfilename); 
			return 7;
		}
		fprintf(outargs, "images/%s-A.bmp\n", shortfilename);
		fprintf(outargs, "images/%s-B.bmp\n", shortfilename);
		fclose(outargs);
	}
	
	DestroyImage(theimage);
    	return 0;
}
